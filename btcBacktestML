import pandas as pd
from backtesting.test import SMA
from backtesting import Strategy, Backtest
from backtesting.lib import crossover
import matplotlib.dates as mdates
import seaborn as sns
from bs4 import BeautifulSoup
import requests
import time
sns.set(style='darkgrid', context='talk', palette='Dark2')
my_year_month_fmt = mdates.DateFormatter('%m/%y')


start_date = '20190601'
# end_date = '20190811'
end_date = time.strftime("%Y%m%d")

url = "https://coinmarketcap.com/currencies/bitcoin/historical-data/?start=" + start_date + "&end=" + end_date
content = requests.get(url).content
soup = BeautifulSoup(content, 'html.parser')
table = soup.find('table', {'class': 'table'})

data = [[td.text.strip() for td in tr.findChildren('td')]
        for tr in table.findChildren('tr')]

df = pd.DataFrame(data)
df.drop(df.index[0], inplace=True)  # first row is empty
df[0] = pd.to_datetime(df[0])  # date
for i in range(1, 7):
    df[i] = pd.to_numeric(df[i].str.replace(",", "").str.replace("-", ""))  # some vol is missing and has -
df.columns = ['Date', 'Open', 'High', 'Low', 'Close', 'Volume', 'Market Cap']
df.set_index('Date', inplace=True)
df.sort_index(inplace=True)


class SmaCross(Strategy):
    # Define the two MA lags as *class variables*
    # for later optimization

    n1 = 2
    n2 = 20

    def init(self):
        # Precompute two moving averages
        self.sma1 = self.I(SMA, self.data.Close, self.n1)
        self.sma2 = self.I(SMA, self.data.Close, self.n2)

    def next(self):
        # If sma1 crosses above sma2, buy the asset
        if crossover(self.sma1, self.sma2):
            self.buy()

        # Else, if sma1 crosses below sma2, sell it
        elif crossover(self.sma2, self.sma1):
            self.sell()


bt = Backtest(df, SmaCross, cash=1, commission=.00075)
bt.run()
print(bt.run())
bt.plot()


# stats = bt.optimize(n1=range(1, 10, 1),
#                     n2=range(17, 30, 1),
#                     maximize='Sharpe Ratio',
#                     constraint=lambda p: p.n1 < p.n2)
#
#
# # print(stats)

# bt.plot()
