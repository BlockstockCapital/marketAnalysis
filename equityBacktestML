import pandas as pd
from backtesting.test import SMA
from backtesting import Strategy, Backtest
from backtesting.lib import crossover
pd.core.common.is_list_like = pd.api.types.is_list_like
import matplotlib.dates as mdates
import seaborn as sns
sns.set(style='darkgrid', context='talk', palette='Dark2')
my_year_month_fmt = mdates.DateFormatter('%m/%y')
import yfinance as yf



start_date = '2012-01-01'
end_date = '2019-08-31'
# end_date = time.strftime("%Y-%m-%d")
spy = yf.download('TSLA', start=start_date, end=end_date)


class SmaCross(Strategy):
    # Define the two MA lags as *class variables*
    # for later optimization

    n1 = 2
    n2 = 20

    def init(self):
        # Precompute two moving averages
        self.sma1 = self.I(SMA, self.data.Close, self.n1)
        self.sma2 = self.I(SMA, self.data.Close, self.n2)

    def next(self):
        # If sma1 crosses above sma2, buy the asset
        if crossover(self.sma1, self.sma2):
            self.buy()

        # Else, if sma1 crosses below sma2, sell it
        elif crossover(self.sma2, self.sma1):
            self.sell()


bt = Backtest(spy, SmaCross, cash=1, commission=.0)
print(bt.run(), '\n')
# bt.plot()

stats = bt.optimize(n1=range(1, 10, 1),
                    n2=range(17, 30, 1),
                    maximize='Sharpe Ratio',
                    constraint=lambda p: p.n1 < p.n2)

bt.plot()
print(stats)
